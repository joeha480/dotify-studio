apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: "signing"

mainClassName = "application.ui.MainFx"
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc {
	options.encoding = 'UTF-8'
	options.links('http://docs.oracle.com/javase/8/docs/api/');
}
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def repoRevision = System.getenv("REPO_REVISION")!=null?System.getenv("REPO_REVISION"):repositoryRevision

group = "org.daisy.dotify"

sourceSets {
	main {
		java {
			srcDir 'src'
		}
		resources {
			srcDir 'src'
		}
	}
	test {
		java {
			srcDir 'test'
		}
		resources {
			srcDir 'test'
		}
	}
}

jar {
	doFirst {
		manifest {
	    	attributes ('Built-By': System.getProperty("user.name"),
	    	'Built-On': new Date().format("yyyy-MM-dd"),
			'Repository-Revision': "$repoRevision",
			'Implementation-Title': "$releaseName",
			'Implementation-Version': version,
			'Implementation-URL': "$repositoryURL",
			'Main-Class': 'application.ui.MainFx',
			'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
			)
		}
	}
	from sourceSets.main.allJava
}

repositories {
    mavenCentral()
    //mavenLocal()
    maven { url "https://oss.sonatype.org/content/groups/staging" }
    //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
	compileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'

	compile 'org.daisy.braille:braille-utils.api:4.2.1'
	//TODO: This is in the compile group because it unfortunately contains some API-like features.
	compile 'org.daisy.braille:braille-utils.impl:4.0.2'
	compile ('org.daisy.braille:braille-utils.pef-tools:3.1.0') {
		exclude module: 'Saxon-HE'
	}
	compile 'com.googlecode.ajui:ajui:1.0.0'
	
	compile 'org.daisy.dotify:dotify.api:4.1.1'
	compile 'org.daisy.streamline:streamline-api:1.0.1'
	compile 'org.daisy.dotify:dotify.common:4.1.0'
	compile ('org.daisy.streamline:streamline-engine:1.1.0') {
		exclude module: 'streamline-api'
	}
	compile 'org.fxmisc.richtext:richtextfx:0.8.2'
	
	testCompile 'org.testfx:testfx-core:4.0.12-alpha'
	testCompile 'org.testfx:testfx-junit:4.0.12-alpha'
	testCompile group: 'junit', name: 'junit', version: "4.12"
	
	runtime ('org.daisy.dotify:dotify.formatter.impl:4.1.0') {
		exclude module: 'Saxon-HE'
	}
	runtime 'org.daisy.dotify:dotify.hyphenator.impl:4.0.0'
	runtime 'org.daisy.dotify:dotify.text.impl:4.0.0'
	runtime 'org.daisy.dotify:dotify.translator.impl:4.0.0'
	runtime ('org.daisy.dotify:dotify.task.impl:4.2.0') {
		exclude module: 'Saxon-HE'
	}

}

buildscript {
    repositories {
    	mavenCentral()
    }
	dependencies { classpath ('com.vladsch.flexmark:flexmark-all:0.19.3') }
}

task copyDocResources(type: Copy) {
	from ('docs') {
		include('**/*.png')
		include('**/*.css')
	}
	into ('build/docs/man')
}

task convertDocs(dependsOn: ['copyDocResources']) {
	def outputDir = file('build/docs/man')
	def inputDir = file('docs')
	inputs.dir inputDir
	outputs.dir outputDir
	doLast() {
	    def options = new com.vladsch.flexmark.util.options.MutableDataSet().set(
		    			com.vladsch.flexmark.parser.Parser.EXTENSIONS,
		    			Arrays.asList(
		    				com.vladsch.flexmark.ext.autolink.AutolinkExtension.create(),
		    				com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension.create(),
		    				com.vladsch.flexmark.ext.wikilink.WikiLinkExtension.create()
		    			)
	    			).set(
	    				com.vladsch.flexmark.ext.wikilink.WikiLinkExtension.LINK_FILE_EXTENSION,
	    				".html"
	    			)

	    def parser = com.vladsch.flexmark.parser.Parser.builder(options).build()
	    def renderer = com.vladsch.flexmark.html.HtmlRenderer.builder(options).build()
		def inputEncoding = 'UTF-8'
		def outputEncoding = 'UTF-8'
		def language = 'en'
		outputDir.mkdirs()
		fileTree(dir: inputDir, include: '*.md')
			.filter{it.isFile()}
			.each {
				file("${outputDir}/${it.name[0..-4]}.html").write(
					"<?xml version=\"1.0\" encoding=\""
					+ outputEncoding+"\"?>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\""
					+ language+"\">\n<head>\n<meta charset=\""
					+ outputEncoding+"\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles/style.css\">\n</head>\n<body>"
					+ renderer.render(parser.parse(it.getText(inputEncoding)))
					+ "</body>\n</html>", outputEncoding
				)
			}
	}
}

distributions {
    main {
        contents {
            from(convertDocs) {
                into "docs"
            }
            from(file('installer/examples')) {
            	into 'examples'
            }
        }
    }
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
	required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

uploadArchives {
	//Only upload if a git hash is supplied. On Travis only upload snapshots.
	enabled = repoRevision.size()==40 && System.getenv("TRAVIS_BUILD_ID")!=null
	repositories {
		mavenDeployer {
			if (isReleaseVersion) {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
            pom.project {
				name 'dotify-studio'
				packaging 'jar'
				description 'Dotify Studio'
				url "$repositoryURL"
				scm {
					connection "$repositorySCM"
					developerConnection "$repositorySCM"
					url "$repositoryURL"
				}
                licenses {
					license {
						name 'LGPL'
						url 'http://www.gnu.org/licenses/lgpl.html'
					}
                }
				developers {
					developer {
						id 'joel'
						name 'Joel HÃ¥kansson'
					}
				}
			}
		}
	}
}

wrapper {
    gradleVersion = '4.5.1'
    distributionType = Wrapper.DistributionType.ALL
}